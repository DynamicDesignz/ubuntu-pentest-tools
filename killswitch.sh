#!/bin/sh
#The scripts fetches non logging dns servers, and implements UFW rules to prevent leaks
#If the VPN link is dropped or openvpn is killed.
#If you can't access anything after everything dies, ufw --force reset is your friend.

dns1="$(wget -qO- https://api.opennicproject.org/geoip/?html --no-check-certificates | awk 'FNR == 1 {print}')"
dns2="$(wget -qO- https://api.opennicproject.org/geoip/?html --no-check-certificates | awk 'FNR == 2 {print}')"

rm /etc/resolv.conf
touch /etc/resolv.conf

echo "nameserver $dns1" >> /etc/resolv.conf
echo "nameserver $dns2" >> /etc/resolv.conf

data1="$(wget -O - -q icanhazip.com)"
range1="$(ip route | grep enp0s3 | awk {'print $3;exit;'})"
whois1="$(whois $data1 | grep 'country:')"
whois2="$(whois $data1 | grep 'route:')"

clear
echo "[*]Information about network"
echo "current ip "$data1
echo "current" $whois1
echo "current" $whois2
echo "current dns server1:" $dns1
echo "current dns server2:" $dns2

echo "enable VPN killswitch"

#Reset default ufw rules
ufw --force reset
# Default policies
ufw enable
ufw default deny incoming
ufw default deny outgoing

# Openvpn interface (adjust interface accordingly to your configuration)
ufw allow in on tun0
ufw allow out on tun0

# Local Network (adjust ip accordingly to your configuration (route)
ufw allow in on enp0s3 from $range1
ufw allow out on enp0s3 to $range1

# Openvpn (adjust port accordingly to your configuration allows out to your public vpn ip)
ufw allow out on enp0s3 to $data1 port 443
ufw allow in on enp0s3 from $data1 port 443
